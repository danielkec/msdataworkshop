/*
 * Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.helidon.data.examples;

import java.sql.Connection;
import java.sql.SQLException;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import oracle.ucp.jdbc.PoolDataSource;

@Path("/order")
@ApplicationScoped
public class OrderResource {


    @Inject
    @Named("atp1")
    private PoolDataSource poolDataSource;

    private Connection conn = null;
    private DBandMessagingInitialization dbandMessagingInitialization= new DBandMessagingInitialization();
    private OracleAQEventListener oracleAQEventListener= new OracleAQEventListener();
    private OracleAQEventProducer oracleAQEventProducer= new OracleAQEventProducer();
    private static String queueOwner ;
    private String orderQueueName = "orderqueue";
    private String inventoryQueueName = "inventoryqueue";
    private String orderTableName = "orders";
    private String orderStatus = "none";
    private int orderId = -1;
    private String suggestiveSaleItem1 = "pencil sharpener";
    private String suggestiveSale = "";
    private String inventoryLocationItem1 = "Philadelphia, PA";
    private String inventoryLocation = "none";
    private String shippingEstimate = "none";
    private String shippingEstimateItem1 = "3 days";

    static {
        queueOwner = System.getenv("oracle.ucp.jdbc.PoolDataSource.atp1.user");
        if (queueOwner == null) queueOwner = "aquser1";
        System.out.println("OrderResource queueOwner:" + queueOwner);
    }


    @Path("/showorder")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response showorder(@QueryParam("order") String message) throws Exception {
        System.out.println("--->showorder...");
        final Response returnValue = Response.ok()
            .entity("orderId = " + orderId + "<br>orderstatus = " + orderStatus +
                    "<br>suggestiveSale (event sourced from catalog) = " + suggestiveSale +
                    "<br>inventoryLocation (event sourced from supplier) = " + inventoryLocation +
                    "<br>shipping estimate (event sourced from supplier) = " + shippingEstimate)
            .build();
        return returnValue;
    }

    @Path("/placeOrder")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response placeOrder(@QueryParam("orderid") String message) throws Exception {
        System.out.println("--->placeOrder... orderid:" + message);
        orderId = Integer.valueOf(message);
        System.out.println("--->insertOrderAndSendEvent..." + insertOrderAndSendEvent(message).getEntity());
        String inventoryStatus = listenForMessagesOnQueue(inventoryQueueName).getEntity().toString();
        if (inventoryStatus.equals("inventoryexists")) {
            orderStatus = "successful";
            suggestiveSale = suggestiveSaleItem1;
            inventoryLocation = inventoryLocationItem1;
            shippingEstimate = shippingEstimateItem1;
        }
        else if (inventoryStatus.equals("inventorydoesnotexist")) {
            orderStatus = "failed";
            suggestiveSale = "";
            inventoryLocation = "";
            shippingEstimate = "";
        }
        System.out.println("--->inventoryStatus..." + inventoryStatus);
        final Response returnValue = Response.ok()
            .entity("orderid = " + message + "<br>orderstatus = " + orderStatus + "<br>inventoryStatus = " + inventoryStatus)
            .build();
        return returnValue;
    }

    @Path("/insertOrderAndSendEvent")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response insertOrderAndSendEvent(@QueryParam("message") String message) throws Exception {
        System.out.println("--->insertOrderAndSendEvent...");
    final Response returnValue = Response.ok()
            .entity(oracleAQEventProducer.updateDataAndSendEvent(
                    poolDataSource , "txt", message,
                    orderTableName, queueOwner, orderQueueName, false, "orderplaced"))
            .build();
        return returnValue;
    }

    @Path("/sendEndPythonAction")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response sendEndPythonAction() throws Exception {
        System.out.println("--->sendEndPythonAction...");
    final Response returnValue = Response.ok()
            .entity(oracleAQEventProducer.updateDataAndSendEvent(
                    poolDataSource , "txt", "0",
                    orderTableName, queueOwner, orderQueueName, false, "endpython"))
            .build();
        return returnValue;
    }


    @Path("/listenForMessagesOnQueue")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response listenForMessagesOnQueue(@QueryParam("queuename") String queuename) throws SQLException {
        System.out.println("OrderResource.listenForMessages queuename" + queuename);
        final Response returnValue = Response.ok()
                .entity(oracleAQEventListener.dolistenForMessages(
                        poolDataSource, queueOwner, queuename, "text"))
                .build();
        return returnValue;
    }

    @Path("/sendMessageToQueue")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response sendMessageToQueue(
            @QueryParam("queuename") String queuename, @QueryParam("messagetype") String messagetype,
            @QueryParam("message") String message, @QueryParam("isuseplsql") String isuseplsql) throws Exception {
        System.out.println("OrderResource.sendMessageToQueue queuename:" + queuename + " isUsePLSQL:"+isuseplsql);
        final Response returnValue = Response.ok()
                .entity(oracleAQEventProducer.updateDataAndSendEvent(
                        poolDataSource , messagetype, message,
                        orderTableName, queueOwner, queuename, Boolean.valueOf(isuseplsql), "orderplaced"))
                .build();
        return returnValue;
    }


    //DB initialization and connection testing endpoints here to end...

    @Path("/createOrderTable")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response createOrderTable() throws SQLException {
        final Response returnValue = Response.ok()
                .entity(dbandMessagingInitialization.createOrderTable(getConnection(), orderTableName))
                .build();
        return returnValue;
    }

    @Path("/createOrderQueue")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response createOrderQueue(@QueryParam("user") String user) throws Exception {
        final Response returnValue = Response.ok()
                .entity(dbandMessagingInitialization.createQueue(
                        poolDataSource, user, orderQueueName, "text"))
                .build();
        return returnValue;
    }

    @Path("/createAQUser")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Response createAQUser(@QueryParam("user") String user, @QueryParam("password") String password) throws Exception {
        final Response returnValue = Response.ok()
                .entity(dbandMessagingInitialization.createAQUser(getConnection(), user, password))
                .build();
        return returnValue;
    }

    @Path("/getConnection")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Connection getConnection() throws SQLException {
        conn = conn != null ? conn : getNewConnection();
        System.out.println("--->order connection.getMetaData():" + conn.getMetaData());
        return conn;
    }

    @Path("/getNewConnection")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public Connection getNewConnection() throws SQLException {
        Connection connection  = poolDataSource.getConnection();
        System.out.println("--->order connection (adding to list):" + connection);
        System.out.println("--->order connection.getMetaData():" + connection.getMetaData());
        return connection;
    }

}
