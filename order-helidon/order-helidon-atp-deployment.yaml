apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: order-helidon
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: order
        version: helidon-mp
    spec:
      # The credential files in the secret are base64 encoded twice and hence they need to be decoded for the programs to use them.
      # This decode-creds initContainer takes care of decoding the files and writing them to a shared volume from which jdbc-app contianer
      # can read them and use it for connecting to ATP.
      initContainers:
      - name: decode-creds
        command:
        - bash
        - -c
        - "for i in `ls -1 /tmp/creds | grep -v user_name`; do cat /tmp/creds/$i  | base64 --decode > /creds/$i; done; ls -l /creds/*;"
        image: oraclelinux:7.5
        volumeMounts:
        - name: creds-raw
          mountPath: /tmp/creds
          readOnly: false
        - name: creds
          mountPath: /creds
      - name: decode-creds-inventory
        command:
        - bash
        - -c
        - "for i in `ls -1 /tmp/creds-inventory | grep -v user_name`; do cat /tmp/creds-inventory/$i  | base64 --decode > /creds-inventory/$i; done; ls -l /creds-inventory/*;"
        image: oraclelinux:7.5
        volumeMounts:
        - name: creds-raw-inventory
          mountPath: /tmp/creds-inventory
          readOnly: false
        - name: creds-inventory
          mountPath: /creds-inventory
      containers:
      - name: order
        image: docker.io/paulparkinson/order-helidon:0.1
        imagePullPolicy: Always
        env:
        - name: oracle.ucp.jdbc.PoolDataSource.atp1.user
          value: "orderuser"
        - name: oracle.ucp.jdbc.PoolDataSource.atp1.password
          valueFrom:
            secretKeyRef:
              name: atp-user-cred
              key: password
        - name: oracle.ucp.jdbc.PoolDataSource.atp1.URL
          value: "jdbc:oracle:thin:@db202002011726_high?TNS_ADMIN=/db-demo/creds"
        - name: orderqueuename
          value: "orderqueue"
        # Pass  Wallet password to enable application to read Oracle wallet. The password is managed by the user and hence not part of the secret created by the binding request.
        # In this example we read the password form secret atp-user-cred that is required to be created by the user.
        - name: WALLET_PWD
          valueFrom:
            secretKeyRef:
              name: atp-user-cred
              key: walletPassword
        volumeMounts:
        - name: creds
          mountPath: /db-demo/creds
        - name: creds-inventory
          mountPath: /db-demo/creds-inventory
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet: #alternatives include exec with command, etc.
            path: /health/live
            port: 8080
          initialDelaySeconds: 20
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 40
      restartPolicy: Always
      volumes:
      # Volume for mouting the credentials file from Secret created by binding request.
      - name: creds-raw
        secret:
          secretName: atp-demo-binding
      # Shared Volume in which init-container will save the decoded credential files and the jdbc-app container reads.
      - name: creds
        emptyDir: {}
