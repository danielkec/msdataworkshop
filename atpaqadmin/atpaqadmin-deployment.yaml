apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: atpaqadmin
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: atpaqadmin
        version: helidon
    spec:
      # The credential files in the secret are base64 encoded twice and hence they need to be decoded for the programs to use them.
      # This decode-creds initContainer takes care of decoding the files and writing them to a shared volume from which jdbc-app contianer
      # can read them and use it for connecting to ATP.
      initContainers:
      - name: decode-creds
        command:
        - bash
        - -c
        - "for i in `ls -1 /tmp/creds | grep -v user_name`; do cat /tmp/creds/$i  | base64 --decode > /creds/$i; done; ls -l /creds/*;"
        image: oraclelinux:7.5
        volumeMounts:
        - name: creds-raw
          mountPath: /tmp/creds
          readOnly: false
        - name: creds
          mountPath: /creds
      containers:
      - name: helidonatp
        image: %DOCKER_REGISTRY%/helidonatp:0.1
        imagePullPolicy: Always
        env:
        # orderpdb...
        - name: oracle.ucp.jdbc.PoolDataSource.orderpdb.user
          value: "admin"
        - name: oracle.ucp.jdbc.PoolDataSource.orderpdb.password
          valueFrom:
            secretKeyRef:
              name: atp-user-cred-orderadmin
              key: password
        - name: oracle.ucp.jdbc.PoolDataSource.orderpdb.URL
          value: "jdbc:oracle:thin:@orderdb_high?TNS_ADMIN=/msdataworkshop/creds"
        # orderuser.password is used in getConnection(orderuser, orderuser.password) of adminuser datasource not for a dedicated datasource...
        - name: orderuser.password
          valueFrom:
            secretKeyRef:
              name: atp-user-cred-orderuser
              key: password
        # inventorypdb...
        - name: oracle.ucp.jdbc.PoolDataSource.inventorypdb.user
          value: "admin"
        - name: oracle.ucp.jdbc.PoolDataSource.inventorypdb.password
          valueFrom:
            secretKeyRef:
              name: atp-user-cred-inventoryadmin
              key: password
        - name: oracle.ucp.jdbc.PoolDataSource.inventorypdb.URL
          value: "jdbc:oracle:thin:@inventorydb_high?TNS_ADMIN=/msdataworkshop/creds"
          # inventoryuser.password is used in getConnection(inventoryuser, inventoryuser.password) of adminuser datasource not for a dedicated datasource...
        - name: inventoryuser.password
          valueFrom:
            secretKeyRef:
              name: atp-user-cred-inventoryuser
              key: password
        - name: WALLET_PWD
          valueFrom:
            secretKeyRef:
              # wallet is the same for both order and inventory and so we only need to use one (in this case order)
              name: atp-user-cred-orderadmin
              key: walletPassword
# PROVIDE VALUES FOR THE FOLLOWING...
        - name: cwalletobjecturi
          value: "https://objectstorage.us-phoenix-1.oraclecloud.com/p/T3rEVg-abJcGE8m-DaO1LcyfGn_ysR2FIqiMdayivNc/n/ax2mkfmpukkx/b/msdataworkshopbucket/o/cwallet.sso"
        - name: orderhostname
          value: "adb.us-phoenix-1.oraclecloud.com"
        - name: orderport
          value: "1522"
        - name: orderservice_name
          value: "fcnesu1k4xmzwf1_orderdb_high.atp.oraclecloud.com"
        - name: orderssl_server_cert_dn
          value: "CN=adwc.uscom-east-1.oraclecloud.com,OU=Oracle BMCS US,O=Oracle Corporation,L=Redwood City,ST=California,C=US"
        - name: inventoryhostname
          value: "adb.us-phoenix-1.oraclecloud.com"
        - name: inventoryport
          value: "1522"
        - name: inventoryservice_name
          value: "fcnesu1k4xmzwf1_inventorydb_high.atp.oraclecloud.com"
        - name: inventoryssl_server_cert_dn
          value: "CN=adwc.uscom-east-1.oraclecloud.com,OU=Oracle BMCS US,O=Oracle Corporation,L=Redwood City,ST=California,C=US"
# ...PROVIDE VALUES FOR THE FOLLOWING END
        volumeMounts:
        - name: creds
          mountPath: /msdataworkshop/creds
        ports:
        - containerPort: 8080
      restartPolicy: Always
      # we only need to mount one of the pdb's bindings (in this case we are mounting order)
      #  as the wallet is the same and the tnsnames.ora contains entries for all pdbs in the compartment (ie both order and inventory)
      volumes:
      - name: creds-raw
        secret:
          secretName: atp-demo-binding-order
      - name: creds
        emptyDir: {}